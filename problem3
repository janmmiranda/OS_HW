#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/time.h>
#include <limits.h>
#include <time.h>
#include <errno.h>

#define PARTS 10

extern int errno;
FILE * fptr;
char * outname;

void clearFile(){
	fptr = calloc(1,sizeof(FILE));
    fptr = fopen(outname, "wb");
	if (fptr== NULL) {
		printf("ERROR: Failed to open file.\n");
		exit(1);
	}
}

int max(int * arr, int count){
	int max = arr[0];
	int i = 1;
	for(i = 1;i < count;i++){
		if(arr[i] > max){
			max = arr[i];
		}
	}
	return max;
}

int min(int * arr, int count){
	int min = arr[0];
	int i = 1;
	for(i = 1;i < count;i++){
		if(arr[i] < min){
			min = arr[i];
		}
	}
	return min;
}

long long sum(int * arr, int count){
	long long sum = 0;
	int i = 0;
	for(i = 0;i < count;i++){
		sum += (long long)arr[i];
	}
	return sum;
}


int main(int argc, char ** argv){
	if(argc != 2){
		printf("ERROR: Expected 1 argument filepath\n");
		return 1;
	}
	char * filename = argv[1];
	FILE * file = fopen(filename, "r");
	// Check if file can be read or exists.
	if (file == NULL) {
		printf("ERROR: Failed to open file.\n");
		return 1;
	}
	outname = calloc(1, 15*sizeof(char) + strlen(filename));
	outname = strcat(outname, "Outputs/C_out_");
	outname = strcat(outname, filename);
	// We need to find the size of the file to do math on it.
	int count = 0;
	fseek(file, 0L, SEEK_END);
	int size = ftell(file);
	rewind(file);
	int * nums = calloc(1,size*sizeof(int));
	while(1){
		int st = fscanf(file, "%d", &nums[count]);
		if(st == EOF){
			break;
		} else if(st == 0){
			fseek(file,1,SEEK_CUR);
		}
		// printf("%ld out of %d\n",ftell(file),size);
		count++;
	}
	size = count;
	fclose(file);
	//printf("SIZE: %d\n",size);
	if(size == 0){
		printf("NOTIFICATION: Empty file\n");
		exit(1);
	}
	int parts = PARTS;
	if(PARTS > size){
		printf("NOTIFICATION: More threads than numbers, lowering process count to num count\n");
		parts = size;
	}
	int part_size = size / parts;
	int extra = size % parts;
	int offset = 0;
	int first = 1;
	// Keep track of child pids. May be useful someday but today is not the day.
	pid_t * childPID = calloc(parts, sizeof(pid_t));
	int * pipes = calloc(parts,2*sizeof(int));
	int i = 0;
	for(i = 0;i < 2*parts;i = i + 2){
		if (pipe(&pipes[i]) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    	}
	}
	int pipeD[2];
	long long data[4];
    struct timeval t0;
    struct timeval t1;
    long elapsed;
    clearFile();
	gettimeofday(&t0, 0);
	for(i = 0;i<parts;i++){
		int j = 0;
		childPID[i] = fork();
		if(first){
			if(childPID[i] == 0){	
			part_size += extra;
        	pid_t child = getpid();
       		pid_t parent = getppid();
       		printf("Hi I'm process %d and my parent is %d.\n",child,parent);
       		fprintf(fptr, "Hi I'm process %d and my parent is %d.\n",child,parent);
			pipeD[0] = pipes[2*i];
			pipeD[1] = pipes[2*i+1];
			int minN = min(nums,part_size);
			int maxN = max(nums,part_size);
			long long sumN = sum(nums, part_size);
			data[0] = (long long)count;
			data[1] = (long long)minN;
			data[2] = (long long)maxN;
			data[3] = sumN;
			write(pipeD[1],data,4*sizeof(long long));
			exit(0);
        }
        	first = 0;
			offset = extra + part_size;
		}else{
			if(childPID[i] == 0){	
        	pid_t child = getpid();
       		pid_t parent = getppid();
       		printf("Hi I'm process %d and my parent is %d.\n",child,parent);
       		fprintf(fptr, "Hi I'm process %d and my parent is %d.\n",child,parent);
			pipeD[0] = pipes[2*i];
			pipeD[1] = pipes[2*i+1];
			int minN = min(nums + offset,part_size);
			int maxN = max(nums+ offset,part_size);
			long long sumN = sum(nums + offset, part_size);
			data[0] = (long long)count;
			data[1] = (long long)minN;
			data[2] = (long long)maxN;
			data[3] = sumN;
			write(pipeD[1],data,4*sizeof(long long));
			exit(0);
        }
			offset += part_size;
		}
     // Wait for processes to finish and then free everything
	}
	for(i = 0;i<parts;i++){
		wait(NULL);
	}
	count = 0;
	int minN = INT_MAX;
	int maxN = INT_MIN;
	long long sumN = 0;
	long long ans[parts][4];
	for(i = 0;i < parts;i++){
		read(pipes[2*i],&ans[i],4*sizeof(long long));
		if(ans[i][0] != 0){
			if(ans[i][1] < minN){
				minN = ans[i][1];
			}
			if(ans[i][2] > maxN){
				maxN = ans[i][2];
			}
			sumN += ans[i][3];
		}
	}
	gettimeofday(&t1, 0);
    elapsed = (t1.tv_sec-t0.tv_sec)*1000000 + t1.tv_usec-t0.tv_usec;
	free(childPID);
	printf("MIN: %d\nMAX: %d\nSUM: %lld\n",minN,maxN,sumN);
	fprintf(fptr, "MIN: %d\nMAX: %d\nSUM: %lld\n",minN,maxN,sumN);
    printf("Time elapsed: %lums\n",elapsed/1000);
    fprintf(fptr,"Time elapsed: %lums\n",elapsed/1000);
	fclose(fptr);
}
